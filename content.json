{"meta":{"title":"Arclogic's Blog","subtitle":"subtitleA","description":"descriptionA","author":"Arclogic","url":"https://arclogicr.github.io","root":"/"},"pages":[{"title":"categories","date":"2022-10-19T10:33:01.000Z","updated":"2022-10-19T10:34:34.050Z","comments":true,"path":"categories/index.html","permalink":"https://arclogicr.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-10-19T10:09:51.154Z","updated":"2022-10-19T10:09:51.139Z","comments":true,"path":"tags/index.html","permalink":"https://arclogicr.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用VirtualBox部署OpenWrt充当旁路由","slug":"openwrt-ply","date":"2023-01-14T13:17:08.000Z","updated":"2023-01-20T15:11:55.629Z","comments":true,"path":"2023/01/14/openwrt-ply/","link":"","permalink":"https://arclogicr.github.io/2023/01/14/openwrt-ply/","excerpt":"","text":"背景知识简介Openwrt简介什么是OpenwrtOpenWrt是一个嵌入式系统，为不同的嵌入式设备（通常是无线路由器）开发的可扩展的GNU&#x2F;Linux发行版。Openwrt最早是由Linksys公司的WRT-54G系统开源而来，后有DD-WRT，HyperWRT等发行版。Openwrt基于Linux内核，可以轻松的扩展所需要的功能。 为什么使用Openwrt传统家用无线路由器自带的官方固件一般比较封闭，功能固定；OpenWrt系统相比之下比较开放，支持大量的Openwrt官方和非官方的软件包，也可自行开发功能。你甚至可以在OpenWrt上运行docker，极大地提升网络的可玩性和访问体验。另外，OpenWrt是开源的嵌入式Linux系统，支持多种设备和平台，如各式无线路由器、x86、ARM等。你可以自行定义OpenWrt运行的设备的平台和配置，而无需受限于传统路由器固有硬件。 旁路网关简介什么是旁路网关旁路网关，俗称旁路由。顾名思义，旁路网关是在主路网关旁边的路由设备，起到辅助的路由和包处理的一些功能，通常旁路网关本身不具备直接访问Internet的能力。正常情况下，局域网内的终端通过主路由器访问Internet，主路由器的LAN口也是属于这个局域网的接口。当局域网中出现另一台路由器（比如OpenWrt）时，可以将其看作是旁路网关。在不对主路网关、旁路网关和终端设备做特殊操作的情况下，终端并不知道旁路网关的存在，流量还是正常走主路网关。可以通过配置让全部&#x2F;部分终端设备的全部&#x2F;部分流量经过旁路由。 为什么使用旁路网关旁路网关的本质是让终端设备的网络流量在转发到主路网关前经过自己，同时可以对这些流量进行一些特殊的处理。旁路网关的存在是为了弥补主路网关缺失的一些功能，同时又不想对网络拓扑结构做大的改动，或者根本无法改动。下面列举两个使用旁路网关的常见场景： 我想在路由器上部署一些特殊的转发策略，只想让自己的终端设备可以按照这些策略转发，不想影响其它的终端设备 我想使用一些开源的服务，但有不想中断现有的网络而影响其他人 使用VirtualBox部署OpenWrt充当旁路网关本次部署的目的是使用VBox虚拟机部署OpenWrt充当旁路由，然后再局域网内使用手机可以通过旁路由上网。网络拓扑如下： 获取OpenWrt官方镜像由于采用的是VBox虚拟机，我们需要x86架构64位的镜像文件。可以从官网下载Index of &#x2F;releases&#x2F;22.03.3&#x2F;targets&#x2F;x86&#x2F;64&#x2F; 这里有很多包，其中包含squashfs字样的是可以通过命令恢复成初始配置的镜像，适合于不喜欢折腾的童鞋。这里我选择了generic-ext4-combined.img.gz这个镜像，版本为22.03.3，解压后获得openwrt22.03.3-x86-64-generic-ext4-combined.img这个文件。 将img转换为VirtualBox支持的虚拟硬盘格式如果你想要安装在硬件软路由上，你需要用img文件通过启动盘制作工具制作启动U盘；这里由于是虚拟机运行，只需转换为VBox支持的虚拟硬盘格式。可以使用VBox自带工具，在cmd控制台VBox安装目录中，使用如下命令转换： 1VBoxManage convertdd openwrt22.03.3-x86-64-generic-ext4-combined.img openwrt.vdi 创建VirtualBox虚拟机在VBox中创建虚拟机。 其中， 操作系统可以选择Linux，Other Linux 64bits CPU和内存分配为1C 1G即可 硬盘需要选择我们刚刚转换好的vdi格式的虚拟硬盘 配置VirtualBox虚拟机网络由于我们将OpenWrt用作旁路由，我们只需要一个接口即可。在刚生成的虚拟机中选择设置网络，网络模式选择桥接，并且必须桥接到有线网卡，宿主机（电脑）也必须有线连接路由器（因为VBox的桥接机制问题），开启混杂模式。开启混杂模式的原因是让宿主机（电脑）的网卡接受目的地址不为宿主机（而是虚拟机）的数据包。 配置OpenWrt配置完网络之后，我们可以开启虚拟机了。但开启虚拟机之前最好在虚拟机网络设置中去掉“接入网线”选项，勾掉这个选项虚拟机暂时不会连接到任何网路，这样的目的是为了阻止OpenWrt回应终端的DHCP请求而分配了192.168.1.0的地址。 修改OpenWrt管理地址开机后，在虚拟机控制按下回车就可以输入命令了。Openwrt默认lan口是192.168.1.1&#x2F;24的地址，默认网卡名为br-lan我们先把lan口地址改为当前局域网的空地址： 1ifconfig br-lan 192.168.3.100 不需要输入掩码，掩码默认24位 修改ip地址后就可以通过192.168.3.100来访问web界面了（如果取消了接入网线，需要把哪个勾勾起来） 关闭OpenWrt的DHCP功能进入web界面后第一步先把LAN口的dhcp关了，我们不需要旁路网关分配ip地址。 在Network-Interface下找到br-lan这个网卡，在edit-DHCP server里面选择ignore this interface。记得点save &amp; apply生效。 然后可以修改个root密码，新版本OpenWrt不改默认密码会有提示。 配置新接口由于OpenWrt默认接口时桥接接口，我们不需要桥接（当然使用桥接也可以）。删除原有br-lan接口，然后新建接口add new interface，协议为static address，物理接口选择eth0。 然后配置IP和子网掩码配置为和原来一样192.168.3.100，网关配置为主路由器地址，比如192.168.3.1 安装软件包新街口配置完成后，此时OpenWrt和一般的终端一样应该可以访问Internet了。在System-Software中更新lists。更新后可以在filter搜索官方软件包们这里可以安装中文包luci-i18n-base-zh-cn 和tcpdump抓包。其它官方包都可以在这个界面安装，非官方包需要下载ipk文件手动opkg install来安装 配置OpenWrt防火墙防火墙的策略应该是仅有的LAN口出、入、转发应当全部放通，最好使用IP地址动态装（MASQUERADING） 首先删除其它区域的策略，只留下Lan区域，然后修改Lan区域配置如下， 注意需要绑定接口eth0，另外上面默认的FORWARD策略是reject，无需修改。 然后将Lan的出、入、转发全部放通，勾选MASQUERADING 其中， 需要勾选FOWARD策略 勾选MASQUERADING后，旁路网关会将终端的IP以PAT的形式转换为旁路网关的IP，这样可以保证上下行路径一致，避免未知问题。如果不勾选，旁路网关只做转发不做PAT，那么终端流量上行走的是旁路网关，下行主路由直接回复。 修改终端设备网关将手机的网关和DNS设置为OpenWrt地址，即可通过OpenWrt上网。如果想要所有终端都可以通过旁路网关上网，可以修改主路由器的DHCP设置，令dhcp下发默认网关改为OpenWrt的IP地址。","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://arclogicr.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"openwrt","slug":"openwrt","permalink":"https://arclogicr.github.io/tags/openwrt/"},{"name":"virtualbox","slug":"virtualbox","permalink":"https://arclogicr.github.io/tags/virtualbox/"}]},{"title":"OpenWrt防火墙翻译","slug":"openwrt-fw1","date":"2023-01-12T10:34:55.000Z","updated":"2023-01-20T03:25:31.879Z","comments":true,"path":"2023/01/12/openwrt-fw1/","link":"","permalink":"https://arclogicr.github.io/2023/01/12/openwrt-fw1/","excerpt":"","text":"Firewall and network interfacesThe goal of a router is to forward packet streams from incoming network interfaces to outgoing network interfaces. Firewall rules add another layer of granularity to what is allowed to be forwarded across interfaces - and additionally which packets are allowed to be inputted to, and outputted from, the router itself. This section discusses the relationships between the firewall code and the network interfaces. At the heart of all routers is a hardware switch with a number of interface ports. When a packet enters one of the switch ports, the hardware switch matches a fixed field in the packet and forwards the packet to an output port which transmits it. 防火墙和网络接口路由器的目标是从入向网络接口到出向网络接口转发分组流。防火墙规则增加了另一个层面的粒度；即，什么分组可以跨接口转发，还有哪些分组可以被允许进入和离开该路由器。本章讨论防火墙代码和网络接口之间的关系。 所有路由器的核心就是一个带有一些端口硬件交换机。当一个分组进入其中一个交换端口，硬件交换机匹配该分组内固定的字段并转发到一个可传输它的出接口。 The switch generally uses the layer-2 destination MAC address in the packet to switch on. Each port has a cache of MAC addresses for stations reachable by (attached to) that port. Entries in the MAC cache gradually out, so must be re-discovered if used again. Layer-2 frames with a known destination MAC are switched to the desired LAN port. If the MAC is not present anywhere in the switch cache, a broadcast packet (e.g. ARP) is flooded to all LAN ports to discover which has access to the destination MAC. 交换机通常使用分组中的二层目的MAC地址进行分组交换。每个端口都有一个MAC地址缓存表记录与它可达的（直连的）站点。MAC缓存条目会逐渐消失，所以必须重新发现，如果要被使用的话。已知目的MAC的二层帧被交换到期待的LAN口。如果MAC在交换机缓存中不存在，则一个广播包（如ARP）会被泛洪到所有的LAN口用来发现哪个口接着该目的MAC。 OpenWrt routers have two types of LAN interface: wired Ethernet (IEEE802.3 or RFC894 Ethernet II, Ethernet II being the most common) and wireless Ethernet (IEEE802.11.) The wired LAN ports each map directly to a single switch port. Generally there is one 802.11 Wi-Fi port attached to a Wi-Fi radio chip (2.4Ghz, 5Ghz). Each handles one or more IEEE802.11 standard protocols (e.g. 802.11a, 802.11n) and ancillary support for wireless networks (e.g. 802.11s mesh networking). The Wi-Fi chips convert the 802.11 signal into a canonical ethernet frame injected into the switch port for routing. All Wi-Fi stations connected to the 802.11 Access Point use the same radio(s) and the same switch port. OpenWrt路由器有两种LAN接口：有线以太网（IEEE802.3 或RFC894 EthernetII，EthernetII是最常见的）和无线以太网（IEEE802.11）。 每个有线LAN端口直接对应一个单独的交换口。通常有一个802.11Wi-Fi口附在一个Wi-Fi无线电芯片（2.4Ghz，5Ghz）。每个处理一个或多个IEEE802.11标准协议（如802.11a，802.11n）和对无线网络的附加支持（如802.11s mesh网络）。WiFi芯片将802.11信号转换到一个添加到交换端口来进行路由的典型以太网帧。所有连接到802.11无线接入点的Wi-Fi站点使用相同的无线电接收器在相同的交换端口。 LAN bridgeThe LAN bridge combines the WLAN interface(s) with the wired LAN ports to create a single logical network. In the interface configuration set option type bridge or in LuCI Network→Interfaces→LAN Bridge interfaces box and select the physical interfaces to bridge together. All switch ports in the bridge will act as a single network. The new pseudo-interface has a br- prepended to the interface name, generally br-lan.Use bridging when combining WLAN and wired Ethernet ports. Otherwise partition the ports into VLANs. 局域网网桥LAN网桥组合WLAN接口和有线LAN接口用来创建一个单独的逻辑网络。在‘interface’配置中设置‘option type bridge’或LuCI中’Network’-‘Interfaces’-‘LAN网桥接口’选项并选择需要桥接在一起的物理接口。所有网桥中的交换端口将成为一个单独的网络。 新的伪端口有一个’br-‘在接口名字前，通常为’br-lan’。 当组合WLAN和有线以太网时使用桥接。否则应使用VLAN分割端口。 Firewall ZonesThe firewall of an OpenWrt router is able to collect interfaces into zones to more logically filter traffic. A zone can be configured to any set of interfaces but generally there are at least two zones: lan for the collection of LAN interfaces and wan for the WAN interfaces. This simplifies the firewall rule logic somewhat by conceptually grouping the interfaces: A rule for a packet originating in a zone must be entering the router on one of the zone’s interfaces,A rule for a packet being forwarded to a zone must be exiting the router on one of the zone’s interfaces.recognize the zone concept does not significantly simplify a simple SOHO router with a single br-lan interface and a single wan interface. Each interface has a one-to-one mapping with a zone. 防火墙区域OpenWrt路由器上的防火墙能够帮接口集中在区域中用来更逻辑化地过滤流量。一个区域可以被配置到任何一个接口组但通常至少有两个区域：lan用来集中LAN接口，wan用来集中WAN接口。 通过概念上给接口分组某种程度上简化了防火墙的规则逻辑： 源于一个区域的数据包的规则是必须在路由器该区域的一个接口进入 被转发到一个区域的分组的规则是必须在路由器该区域的一个接口离开 注意区域的概念不能显著简化一个简单的SOHO路由器通过单独的br-lan接口和单独的wan接口。每个接口都有一个1对1映射的区域。 Firewall componentsThe OpenWrt firewall implementation is the mechanism by which network traffic is filtered coming through the router. At a high level, one of three outcomes will occur: either the packet is discarded (dropped) without any further action, rejected (with an appropriate response to the source), or accepted (routed to the destination). Note that the router itself is a destination for management and monitoring. The OpenWrt firewall revolves around the Linux netfilter project. There are the following main components to the OpenWrt firewall: the firewall3 applicationa set of netfilter hooks in the kernel networking stacksa set of linux kernel modules that handle the inspection of network packetsa set of kernel tuning parameters to configure the network stacks and firewall modulesThis documentation is based on OpenWrt 18.06.0. Many of the configurations have been tested against this release using the test network Firewall3 (fw3)The fw3 application package is the main application used to provision the firewall. It was developed by the OpenWrt team specifically for the project. 防火墙组成OpenWrt防火墙的运行机制就是过滤通过路由器的网络流量。在更高的层面上，三个当中的一个结果将会发生：分组要么被丢弃而没有任何进一步操作，要么被拒绝（对源有适当的响应），要么被接受（路由到目的地）。注意路由器本身是一个管理和监控的目的地。 fw3fw3应用包是主要的用来置备（prov团ision）防火墙的应用。它由OpenWrt团队为这个项目特别开发。 Kernel netfilter hooksEach of the network stacks have netfilter functions call hooks embedded at specific places in the code. As a network packet moves through the stack, each hook is called to check the packet against possible netfilter rules bound to the hook. The netfilter hook code uses the NF_HOOK set of macros. Each hook takes the following arguments: network protocol: unspec (all), ipv4, ipv6, arp, bridge, decnet hook num: PRE_ROUTING, LOCAL_IN, FORWARD, LOCAL_OUT, POST_ROUTING net structure: context for the network stack socket: BSD socket used for packet network packet: a socket buffer containing the network packet incoming device (interface): the source of the packet outgoing device (interface): the destination of the packet after routing a function callback if the packet passes the filter 内核netfilter hooks每个网络栈都有一个netfilter功能嵌入在代码中的某个特殊地方。当一个网络分组在堆栈中移动时，每个hook会被调用来根据绑定到狗子的可能的netfilter规则检查分组。 Netfilter hook代码使用NF_HOOK宏组。每个hook采用以下参数： network protocol: unspec (all), ipv4, ipv6, arp, bridge, decnet hook num: PRE_ROUTING, LOCAL_IN, FORWARD, LOCAL_OUT, POST_ROUTING net structure: 网络栈的环境 socket: 为分组使用的BSD套接字 network packet: 一个包含分组的套接字缓存 incoming device (interface): 分组源 outgoing device (interface): 分组路由后的目的r 回调函数，如果分组通过过滤器 Kernel netfilter modulesThe netfilter kernel modules are loaded at boot depend on the configured. There are roughly 35 kernel modules to support the standard netfilter capabilities but there are many more depending on the requirements of the router. For example, many routers use the ipset feature. This adds ~16 additional kernel modules. Most of the netfilter modules are small, providing a single specific capability. For example: ipt_REJECT performs REJECT (target), xt_multiport performs match of the IP port (match) xt_TCPMSS performs Maximum Segment Size adjustment in the TCP header (target in mangle table) Several of the netfilter modules are larger. For example: nf_conntrack performs connection tracking for masquerading (NAT) and packet de-fragmentation. Kernel tuning via sysctl&#x2F;etc&#x2F;init.d&#x2F;sysctl is executed at boot time. This is a shell script that loads &#x2F;etc&#x2F;sysctl.conf and all files under &#x2F;etc&#x2F;sysctl.d&#x2F;. These set&#x2F;tune kernel parameters to provide OpenWrt features. See sysctl.conf. All are parameters documented under the Documentation&#x2F;networking directory of kernel source tree so the specifics will not be repeated here. See ip-sysctl.txt and nf_conntrack-sysctl.txt for reference. Since the OpenWrt feature set is fairly static, the kernel parameters almost certainly do not need to tuned beyond the defaults provided in the build. Notice that netfilter bridging support in the kernel is disabled! See ip-sysctl.txt: 1234bridge-nf-call-iptables - BOOLEAN 1 : pass bridged IPv4 traffic to iptables&#x27; chains. 0 : disable this. Default: 1 内核netfilter模块netfilter内核模块按照配置在启动时被加载。有大概35个内核模块支持标准网络过滤能力，但是有很多更取决于路由器的条件。比如，很多路由器使用ipset功能。这增加了~16个额外内核模块。 大多数的netfilter模块比较小，提供一个单独而特殊的能力。例如： ipt_REJECT — REJECT (target), xt_multiport — match of the IP port (match) xt_TCPMSS — Maximum Segment Size adjustment in the TCP header (target in mangle table) 有几个netfilter模块很大。例如： nf_conntrack — connection tracking for masquerading (NAT) and packet de-fragmentation. 内核调节通过sysctl&#x2F;etc&#x2F;init.d&#x2F;sysctl在启动时执行。这是一个shell脚本来载入&#x2F;etc&#x2F;sysctl.conf和在&#x2F;etc&#x2F;sysctl.d&#x2F;下的所有文件。这些设置&#x2F;调整内核参数提供了OpenWrt的功能。参见sysctl.conf。 所有都是在内核源码树的Documentation&#x2F;networking目录下记录的参数，这里不再赘述。 请参阅 ip-sysctl.txt 和 nf_conntrack-sysctl.txt 以供参考。 既然OpenWrt功能集合是比较静态的，内核参数几乎不需要调整到超出构建时的默认值。 注意netfilter桥接支持在内核中是关闭的！参见ip-sysctl.txt： 1234bridge-nf-call-iptables - BOOLEAN 1 : pass bridged IPv4 traffic to iptables&#x27; chains. 0 : disable this. Default: 1","categories":[{"name":"文档翻译","slug":"文档翻译","permalink":"https://arclogicr.github.io/categories/%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"firewall","slug":"firewall","permalink":"https://arclogicr.github.io/tags/firewall/"},{"name":"openwrt","slug":"openwrt","permalink":"https://arclogicr.github.io/tags/openwrt/"},{"name":"translation","slug":"translation","permalink":"https://arclogicr.github.io/tags/translation/"}]},{"title":"kvm如何禁止虚拟机之间通信","slug":"kvmq1","date":"2023-01-04T07:37:05.000Z","updated":"2023-01-12T10:34:27.808Z","comments":true,"path":"2023/01/04/kvmq1/","link":"","permalink":"https://arclogicr.github.io/2023/01/04/kvmq1/","excerpt":"","text":"一般来说，使用KVM创建虚拟机，都会有虚拟机之间通信的需求，KVM的四种网络模式也都默认允许同一网段的虚拟机之间互通。如果有特殊需求，需要禁止虚拟机之间的通信，该如何配置？ KVM四种网络模式 首先隔离模式，相当于Vmware&#x2F;Vbox 仅主机模式，VM之间可通信，VM与宿主可通信，VM与外部不可通信 NAT模式，VM之间可通信，VM与宿主可通信，VM可访问外部，外部访问VM需要做端口转发 桥接模式，VM之间可通信，VM与宿主可通信，VM可访问外部，外部可访问VM。一般桥接模式下VM网段与宿主机同段。 路由模式，VM之间可通信，VM与宿主可通信，VM可访问外部，外部可访问VM。路由模式下VM网段可以与宿主机不同端，外部需要配置路由才能访问VM iptables解决方案搜了资料，有人说可以用iptables实现，原理如下 NAT模式下，宿主机有一块网卡virbr0。针对virbr0，在iptables中FORWARD链限制同网段互访 1-A FORWARD -i virbr0 -s 192.168.1.0/24 -d 192.168.1.0/24 -j DROP 我尝试了下，不知为何不生效，也许因为虚拟机互访实际流量并不经过virbr0？尝试将FORWARD链改为INPUT链也是不生效。后来放弃iptables，改用nwfilter。 nwfilter解决方案nwfilter是kvm自带的网络流量工具，可以精确控制每一块vm网卡。上面iptables的方案是在宿主机上做策略，而nwfilter是对每一个vm做策略，nwfilter的策略可以应用在多个vm上。 总的来说nwfilter的用法就是，定义nwfilter策略，生效策略，应用策略。下面以NAT模式下禁止虚拟机之间互通为例介绍nwfilter解决方案 定义策略在&#x2F;etc&#x2F;libvirt&#x2F;nwfilter下建立xml文件 1vi /etc/libvir/nwfilter/deny-inter.xml 写入规则 123456789&lt;filter name=&#x27;deny-inter&#x27; chain=&#x27;ipv4&#x27; priority=&#x27;-700&#x27;&gt; &lt;uuid&gt;ab4b9613-3442-41af-a4b3-0a3bdaae7111&lt;/uuid&gt; &lt;rule action=&#x27;accept&#x27; direction=&#x27;in&#x27; priority=&#x27;200&#x27;&gt; &lt;ip srcipaddr=&#x27;192.168.122.1&#x27; srcipmask=&#x27;32&#x27;/&gt; &lt;/rule&gt; &lt;rule action=&#x27;drop&#x27; direction=&#x27;in&#x27; priority=&#x27;201&#x27;&gt; &lt;ip srcipaddr=&#x27;192.168.122.0&#x27; srcipmask=&#x27;24&#x27;/&gt; &lt;/rule&gt;&lt;/filter&gt; 其中， 这里只采用了ipv4的链，只需要对ip包进行过滤 注意uuid不要与现有的相同 每条规则后的优先级越小越优，如果优先级相同优先匹配前面的规则 这里的规则将来是应用在虚拟机上，所以in&#x2F;out是针对虚拟机网卡的 第一条规则是为了保证dhcp正常工作，这里用in方向策略会方便一点，因为dhcp discover包发出去是广播，dhcp offer包回来是单播，in方向只需要允许宿主机的单播包就可以了 更多nwfilter的详细用法可以参考VirtualNetworking - Libvirt Wiki 生效策略12virsh nwfilter-define deny-inter.xml #生效策略virsh nwfilter-list #查看是否生效 应用策略编辑虚拟机配置文件 1virsh edit vm01 找到添加定义过的策略 123456&lt;interface type=&#x27;network&#x27;&gt; &lt;mac address=&#x27;52:54:00:ec:f5:4e&#x27;/&gt; &lt;source network=&#x27;default&#x27;/&gt; &lt;model type=&#x27;e1000&#x27;/&gt; &lt;filterref filter=&#x27;deny-inter&#x27;/&gt; #ADD POLICY &lt;address type=&#x27;pci&#x27; domain=&#x27;0x0000&#x27; bus=&#x27;0x00&#x27; slot=&#x27;0x03&#x27; function=&#x27;0x0&#x27;/&gt; 最后重启虚拟机，VM之间无法ping通，VM与宿主机可通，VM ping 外面可通。","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://arclogicr.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"kvm","slug":"kvm","permalink":"https://arclogicr.github.io/tags/kvm/"}]},{"title":"IPv6地址","slug":"ipv6","date":"2022-04-17T12:54:13.000Z","updated":"2023-01-26T01:43:13.834Z","comments":true,"path":"2022/04/17/ipv6/","link":"","permalink":"https://arclogicr.github.io/2022/04/17/ipv6/","excerpt":"","text":"IPv6简介什么是IPv6IPv6，Internet Protocol version 6（网际协议第六版），IPv4的升级版本。和IPv4类似，IPv6是一种逻辑编址方案，用于网络层主机到主机的通信。 为什么使用IPv6IPv4初期由于其协议简单、易于物理实现等优势，被广泛使用。随着互联网技术迅速发展，IPv4在很多方面已经无法满足现有需求，IPv6的问世解决了IPv4的很多弊端。 IPv4的局限性&#x2F;IPv6的优势 地址空间 IPv4的理论可用地址数为2的32次方约43亿个，已经无法满足巨量终端的入网需求，只能依靠NAT等技术减少公网IP的使用。实际上在2019年11月25日欧洲RIPE NCC宣布IPv4地址正式耗尽。 IPv6地址采用128bit标识，理论上可用地址数是2的128次方，为全部IPv4地址的2的96次方倍，拥有近乎无限的地址空间。 安全 IPv4在设计上并没有考虑网络层的安全问题，当时认为安全是上层才需要负责的。 IPv6集成了IPSec，支持IPSec的认证和加密。由于充足的地址空间，使得层次化地址分配成为可能，容易溯源。对于攻击者，在有限的时间内，无法遍历巨量的IPv6地址。 通信模型 由于NAT的大量使用，破坏了端到端的模型，由此衍生了一些列繁琐的配置（如端口映射） IPv6地址充足，无需使用NAT。 路由聚合 互联网在世界各地发展并不均衡，所以IPv4在分配时各地区所获得的地址并不连续。这会导致每个地区的公网路由无法被聚合，路由表会相当庞大，对路由设备性能要求极高。 IPv6可以很方便的进行层次化网络部署，方便路由聚合，提高转发效率。 配置 IPv4没有重编功能，网卡原则上职能配置一个IPv4地址，而一个网卡可以配置多个并重的IPv6问题，简化重编值的复杂性。 IPv6内置自动配置，可使得主机自动发现网络并获取IPv6地址，提高管理效率。 处理效率 IPv4包头字段相对较多，对网络设备有一定性能要求 IPv6去除了标志位、段偏移、头部校验和、选项等字段，只增加流标签域方便做QoS，因此IPv6报头更为简化，提高处理效率。 IPv6地址IPv6地址结构一个IPv6地址由128个bit组成。一个十六进制数可以表示4个bit，通常用32个16进制数四个一组表示IPv6地址。如： 12001:0db8:02de:0000:0000:0000:0000:0e13/64 在一个IPv6地址中分为前缀和接口号两个部分。前缀和IPv4中网络号类似，用于标识一个网络；接口号和IPv4中主机号类似，用于标识终端。上述IPv6地址所在的网络是： 12001:0db8:02de:0000:0000:0000:0000:0000/64 IPv6地址表示IPv6地址的简化表示IPv6地址采用冒号分十六进制的方式表示。128bit长的IPv6地址可以表示8组4个十六进制数，用冒号隔开（如上述IPv6地址）。 其中， 每一组的前导0可以省略 连续的0可以用::来省略 一个IPv6地址中只能使用一次::来省略连续的0（不然无法唯一确定连续0的个数）。 如上述IPv6地址可简写为： 12001:db8:2de::e13/64 URL的IPv6表示在URL中，需要使用[]来确定IPv6地址，如： 1http://[2001:ab:123::cdef]:8080/index.html IEEE EUI-64规范IEEE EUI-64规范定义了如何将网络接口的MAC地址转换为IPv6接口标识。网卡物理地址由48bit组成，使用十六进制可表示为： 10050:A1AB:CDEF MAC地址的前24位（0050A1）为厂商标识，后24位（ABCDEF）为扩展标识符。从高位数，第7位是0表示了MAC地址本地唯一。 MAC转换位IPv6接口方法： 将48位的MAC地址从中间分开，插入一个固定数值FFFE 10050:A1AB:CDEF--&gt;0050:A1FF:FEAB:CDEF 然后将第7个比特位反转，如果原来是0，就变为1,如果原来是1，就变为0 10050:A1FF:FEAB:CDEF--&gt;0250:A1FF:FEAB:CDEF 这种由MAC地址产生IPv6地址接口标识的方法可以减少配置的工作量，尤其是当采用无状态地址自动配置时，只需要获取一个IPv6前缀就可以与接口标识形成IPv6地址。但是使用这种方式最大的缺点是任何人都可以通过二层MAC地址推算出三层IPv6地址。 IPv6地址分类IPv6没有广播的概念，所以没有ARP包，也没有广播地址。IPv6地址分为单播、组播和任意播。 单播单播地址用于一对一的连接，主要有以下几种类型 可聚合全球单播地址（Aggregate Global Unicast Address）可聚合全球单播地址类似于IPv4的公网地址，可在全球路由。目前前三位为001的IPv6地址被用作可聚合全球单播地址，即2000:&#x2F;3，占了12.5%的IPv6地址空间 IPv6全球可路由地址的分配 由于IPv6采用分级编址，IPv6全球可路由地址前缀由地址分配机构逐级向下分配： 前缀长度 适用场景 32 RIR&#x2F;NIR（区域&#x2F;国家互联网注册机构）分配给有 ASN 的运营商、互联网公司、大型企业。是地址最小分配单元（再小就不给了）。 40 运营商向有多个（256个以内）站点和数据中心的大型企业分配的前缀 44 运营商向有多个（16个以内）站点和数据中心的中型企业分配的前缀 48 运营商向中小客户分配的常见前缀长度。或大中企业内一个站点的前缀 56 宽带运营商给家庭用户和小微企业分配的最小前缀长度（最大子网大小） 64 末端设备子网，&#x2F;64 是很多协议硬性要求的（IPv6 无广播风暴风险） 127 路由器点对点链路，此处不是为了节约地址而是防止一种资源耗尽型攻击 链路本地地址（Link-Local Address）链路本地地址是一个只在本链路有效的IPv6地址。在一个节点启用IPv6后，每个接口都会生成以一个链路本地地址。链路本地地址前10bit固定，为 1fe80::/10 其后64位通常根据EUI-64格式来构造，但也有的终端是根据一定算法生成（出于安全原因），如：windows。 链路本地地址唯一标识一个节点，在本地链路看到下一跳都是对端的Link Local地址，在网络重新编址过程中，节点和路由器的Link Local地址不会发生变化，可以很容易地做一个修改，不用担心中断。 唯一本地地址 （Unique Local Address）唯一本地地址类似于IPv4私网地址，今能在站点本地使用。由于站点本地地址被废除，唯一本地地址用来代替站点本地地址。 固定前缀为 1FC00::/7 其中， L为标志位，值为1表示该地址为在本地网络范围内使用的地址；为0被保留，相当于只有FD00::&#x2F;8被使用 Global ID为全球唯一前缀；随机产生 Subnet ID为子网ID；用于划分子网 Interface ID；接口标识 唯一本地地址拥有全球唯一前缀，可以在私有网络之间通信。 *站点本地地址 （Site-Local Address）已弃用IPv6的保留地址，类似于IPv4的私网地址，只能在站点本地使用，无法在公网路由。站点本地地址占整个地址空间0.1%。 站点本地地址前10bit固定，为 1FEC0::/10 后54为左右子网标识，最后64为用于接口标识。 未指定地址 （Unspecified Address）未指定地址表示地址未被指定，或者表示默认路由（所有路由），形式如下： 10:0:0:0:0:0:0:0 或 :: 环回地址 （Loopback Address）换回地址表示节点自己，在本节点有效，和IPv4类似，形式如下： 10:0:0:0:0:0:0:1 或::1 IPv4映射的IPv6地址 （IPv4-Mapped IPv6 Address）IPv4映射的IPv6地址是包含IPv4的IPv6地址，用于双栈的本地范围 其中高80bit为0，后跟16bit的1，在跟IPv4地址，如： IPv4地址 1100.100.100.100 的IPv4映射的IPv6地址为 1::ffff:6464:6464 *IPv4兼容地址 （IPv4-Compatible IPv6 Address） 已弃用 IPv4兼容的IPv6地址是包含IPv4的IPv6地址，用于在IPv4网络上建立自动隧道，传输IPv6包 其中高96比特设置为0，后面设置为32bit的IPv4地址，如： IPv4地址 1100.100.100.100 的IPv4兼容的IPv6地址为 1::6464:6464 这种机制不太完善，后被弃用 组播组播用于一对多的通信、 组播前缀固定FF00::&#x2F;8，占用约0.38%的IPv6地址空间 其中， FF为前8位固定值 Flag标志位0000永久保留 Scope传播范围 Scope定义了组播地址的范围，取值与范围如下： 十六进制 范围 1 本地接口 2 本地链路 3 本地子网 4 本地管理 5 本地站点 8 组织机构 E 全球 RFC2373建议将后112的前80为置0，后32位为组播的组ID 被请求节点组播地址 （Solicited-Node Multicast Address）被请求节点组播地址根据每一个单播和任意播地址生成一个对应的组播地址，并加入该组播组。被请求节点组播地址只在本地有效。被请求节点组播地址用于邻居发现和DAD地址重复检测。 被请求节点组播地址固定前缀为FF02::1:FF00:0000&#x2F;104，将IPv6地址的后24位填充到被请求节点组播地址的接口标识就组成了改IPv6地址的被请求节点组播地址。如： 12001::ABCD:ABCD/64 对应的被请求节点组播地址为 1FF02::1:FFCD:ABCD/104 如图，在路由器的一个接口上开启IPv6功能，然后查看该接口的ipv6的状态 1234int e0/0 ipv6 enableendshow ipv6 int e0/0 显示结果如下： 其中可以看到IPv6使能后，接口生成了链路本地地址，为FE80::A8BB:CCFF:FE00:200，并为它生成了被请求节点组播地址FF02::1:FF00:200 由于被请求节点组播地址是可以根据IPv6地址容易计算出来的，当需要解析链路上IPv6的二层地址时，可以通过NS报文发送至改IPv6的被请求节点组播地址，实现了类似IPv4中的ARP解析功能。 任意播任意播本质是单播。任意播标识一组设备，需在网络设备如路由器上定义一个单播IPv6地址为任意播地址，当路由器收到目的地址为任意播地址时，会将其转发到最近的任意播地址。这种机制在网络层面上起到了类似于CDN的作用，就近分配任务。 IPv6没有为任意播单独定义地址空间，任意播和单播使用相同地址空间，任意播不可以作为源IPv6地址。 IPv6报文格式IPv6报文由IPv6基本报头、IPv6扩展报头和上层协议数据三部分组成 IPv6基本报头IPv6报头格式如下 其中 Version，为版本号，固定为6 Traffic Class，为流类别，与IPv4中TOS类似，定义流的类别 Flow Label，为流标签，新增字段，区分实时流量，网络设备可根据这个字段更高效的转发 Payload Length，为有效载荷长度，16bit，表示出基本头以外的载荷（拓展头和上层数据）长度，超过65535会置0 Next Header，为下一个报头，即紧跟在基本报头后的协议类型（可以是拓展报头也可以是上层协议） Hop Limit，为跳数限制，类似于IPv4中的TTL，定义了IPv6数据包可以经过的最大跳数 Source Address，为源IPv6地址 Destination Address，为目的IPv6地址 IPv6拓展报头IPv4中，IPv4报头包含可选字段Options，这些选项会增加IPv4报头长度，校验和也会改变，在实际中很少使用。 IPv6不使用Options字段，改用拓展报头。IPv6拓展报头位于IPv6基本报头与上层数据之间，根据需要可任意添加0个或多个拓展报头。下一级拓展报头通过上一级报头的Next Header字段指明协议类型。拓展报头格式如下： RFC2460中定义了6钟IPv6拓展头 IPv6拓展头 Next Header 作用 逐跳选项 0 巨型载荷；设备提示；RSVP 目的选项 60 携带目的节点才会处理的信息 路由 43 携带IPv6路由信息，强制指定数据包经过特点设备 分段 44 IPv6也受MTU限制，通过分段拓展报头进行分段 认证 51 由IPsec使用，提供认证、完整性和重放等保护 封装安全净载 50 由IPsec使用，类似于AH IPv6大包ping分段拓展头抓包结果如下： 可以看到，IPv6基本头中的Next Header为分段拓展头协议号44，IPv6拓展报头中的Next Header指向ICMPv6协议号58 当超过一种扩展报头被用在同一个IPv6报文里时，不是所有的拓展报头都需要被处理，但报头必须按照下列顺序出现： IPv6基本报头 逐跳选项扩展报头 目的选项扩展报头 路由扩展报头 分段扩展报头 认证扩展报头 封装安全有效载荷扩展报头 目的选项扩展报头 上层协议数据报文 目的选项拓展报头可能出现1或2次，其它拓展报头只能出现一次。","categories":[{"name":"网络基础","slug":"网络基础","permalink":"https://arclogicr.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"tcp/ip","slug":"tcp-ip","permalink":"https://arclogicr.github.io/tags/tcp-ip/"}]},{"title":"BGP学习笔记","slug":"bgp-notes","date":"2022-04-02T11:18:05.000Z","updated":"2023-01-17T08:34:25.717Z","comments":true,"path":"2022/04/02/bgp-notes/","link":"","permalink":"https://arclogicr.github.io/2022/04/02/bgp-notes/","excerpt":"","text":"概述BGP全称边界网关协议（Boarder Gateway Protocol）,是运行在自治系统（AS）之间传递路由信息的协议 AS定义（rfc1930） The classic definition of an Autonomous System is a set of routers under a single technical administration, using an interior gatewayprotocol and common metrics to route packets within the AS, and using an exterior gateway protocol to route packets to other ASes. AS的经典定义是一组被单一技术管理的路由器，使用IGP和统一的metric在AS内路由分组，并使用EGP与其它AS路由分组。 基本特点 路径矢量路由协议，基于TCP 179端口 首次建立连接做完整路由信息更新，以后就只做增量更新、触发更新 有丰富的属性可以灵活选路 被设计用于特大网络，例如Internet 三张表邻居表用于记录BGP对等体的邻居信息，包括状态信息，AS号等等，邻居不需要直连 BGP表用于记录学习到的路由详细信息，包括BGP的路由属性，最优路由等 路由表BGP提交最优路由到路由表 BGP报文OPEN用于建立一个BGP连接，包括holdtime，RID，AS等 KEEPALIVE用于维护邻居，默认60s一次，holdtime180s UPDATE用于更新路径信息，一次可以通告一条路由和它的多个属性；也可以一次通告多个路由但它们的所有属性必须相同；一次可撤销多个路由 NOTIFICATION用于传递错误信息 REFRESH路由刷新请求 BGP邻居BGP邻居关系状态机初始阶段，双方都是 idle 状态，等待连接重试时间到期后，双方进入 active 状态，并且双方各自回退一个 随机 delay 时间，delay 小的路由器，delay到期后，将主动发起 TCP 连接，delay 大的路由器在收到 TCP 连接请求后，将回到 idle 状态后进入到 connect 状态。若TCP连接失败，则进入active状态重传，建立成功进入opensent，不成功回退到Connet状态。TCP 连接建立完后，双方进入 OpenSent 状态，在这状态 中，双发互相发送 open 消息，并且侦听来自邻居的 open 消息，如果接收到的 open 消息没有差错，则发送 keepalive 消息并设置 keepalive 定时器，协商保持时间，根据对方的 AS 号，确定连接是内部的还是外部的，并 且迁移到OpenConfirm 状态，在 OpenConfirm 状态下，一旦收到 keepalive 消息，则进入到 establish 状态， establish 状态后，即双方已经建立 BGP 邻居，随即双方交换 update包。 其中， 默认路由无法主动发起TCP连接，但可以回应主动发起TCP连接请求的一方必须用对方neighbor所指定的IP地址作为源发出TCP连接请求 建邻居的两端，先协商 Hold 时间，Hold 时间保持一致，Hold 时间为两端的最小值。 keepalive 时间 &gt; 三分之一的 Hold 时间，取三分之一的 Hold 时间作为 keepalive 时间。 keepalive 时间 &lt;&#x3D; 三分之一的 Hold 时间，keepalive 时间不变。 BGP只有当连接处于建立状态时，才能交换更新、存活和通知消息 EBGP建立邻居默认TTL是1 关闭直连检测TTL还是1 改eBGP多跳设置，TTL可设置其他值 如果一直停在idle状态，则可能： 没有去往邻居的路由 neighbor命令指错了邻居的地址 如果一直停在active状态，则可能： 邻居没有过来的路由 邻居没有指neighbor命令 邻居neighbor中指的地址错误 两端的AS号不匹配 BGP邻居类型eBGP eBGP是不同AS之间建立的BGP邻居 通常要求直连，建议使用直连接口建立邻居 AD默认20（Cisco） iBGP iBGP是AS内建立的BGP邻居 无需直连，只需传输层可达 AD默认200（Cisco） BGP更新源BGP默认开启直连监测和源监测 直连监测：需要根据neighbor中的指定的具体IP来进行判断，是不是直连IP，如果不是，连TCP三次握手都不成功，更不可能建立完整的BGP邻接了 源检测：监测过来访问自己179端口的IP是否是nei后面的ip 路由器用来和邻居建立邻居关系的IP地址叫BGP更新源地址。BGP建立邻居过程中，由于默认开启源检测，来自邻居的邻居建立源IP必须是本地neibor指定的邻居IP，否则无法建立邻居关系。 “show ip bgp summary中的Neighbor” &#x2F; “show ip bgp中的Next Hop ”都是指Update-Source 查看BGP邻居1show ip bgp summary 显示结果 其中， Neighbor为邻居更新源IP AS为对方AS号 MsgRcvd&#x2F;Sent为BGP消息接受&#x2F;发送数量 State&#x2F;PfxRcd为BGP邻居建立状态，当显示为数字时，表示状态为Established并且收到该数量的路由前缀 清除BGP会话bgp不会周期更新，是增量更新 以下命令为BGP会话硬件清除，重新建立邻居；慎用！！！ 12clear ip bgp *clear ip bgp 3.3.3.3 以下命令为出入向软件清除，不会改变状态机 1clear ip bgp * soft [out/in/-] 出向软清，发送UPDATE，不发送刷新消息 入向软清，不发送UPDATE，发送刷新消息，对方回复UPDATE 双向软清，发送UPDATE，发送刷新消息，对方恢复UPDATE 可以使用以下命令缓存被拒绝的路由 12bgp 100nei 3.3.3.3 soft-reconfiguation inbound BGP防环机制 从iBGP邻居收到的路由不再传给其它iBGP邻居（iBGP水平分割） 拒绝从EBGP邻居收到的AS-PATH属性含有自身AS号的路由 iBGP水平分割可以通过Fullmesh、RR或联邦来解决 neighbor a.a.a.a remote-as AS含义指定对方属于哪个AS，所指a.a.a.a地址，必须在IGP可达（双方不能都是默认路由） 1、我将会向nei后面地址的179端口发起TCP连接，建立BGP邻居 2、只允许nei后面地址作为源来访问我的179端口（TCP请求源检测 ） 对等体组有时可能对多个邻居进行相同的BGP配置，可以定义对等体组将其统一配置（neighbor XX peer-group） BGP路由操作BGP路由发布network宣告特点 够通告路由表中的所有非BGP路由 默认情况下必须精确宣告网络和掩码 只起到宣告作用，不建邻居 可宣告IGP学到的路由，并携带Metric和Next-hop no-autosummarynetwork含义–network后面的网段和掩码必须和路由表中条目精确匹配才能宣告进BGP表 redistribute–重分布明细进BGP autosummarynetwork含义–network后面的网段和掩码必须和路由表中明细路由的主类路由匹配才能宣告进BGP表 redistribute–重分布主类路由进BGP ibgp重分布需要在bgp进程下 1bgp redistribute-internal BGP路由传递规则 iBGP之间传递路由，下一跳不变 联邦iBGP&#x2F;eBGP传递路由，下一跳不变 eBGP之间传递路由，下一跳改变 iBGP水平分割：从iBGP邻居收到的路由不会传给iBGP邻居 BGP同步BGP同步是针对iBGP水平分割的一个早起解决方案。 开启同步后，AS内的一个路由器从iBGP邻居处学到一条路由，不用也不传，除非是从IGP学到同样一条路由。（网络号和掩码都必须完全一样） BGP同步配置 12router bgp 64512synchronization BGP路由优化BGP收到路由后会优化路由，被优化的路由才能被使用，被传递。一般根据以下条件判断该路由是否可以被优化： 是否满足同步条件 下一跳是否可达（本地优化） 入向策略允许的路由、 路径选择（路径优化），若有多条路径去往相同的网段，选择一条最优的路由 BGP表中的路由优化后的2个动作： 向路由表提交这条最优的BGP路由 向BGP的peer邻居发送包含这条BGP最优路由的更新 第三方下一跳收到BGP路由的下一跳（递归完的下一跳）与建邻居nei地址在同一网段，保持下一跳不变；不在同一网段，改变下一跳。（RIP与EIGRP也存在第三方下一跳，EIGRP默认关闭） BGP路由重分发将OSPF重分发进BGP时，默认只将internal充分发。可使用以下令充分发其它OSPF路由 12router bgp 64512 redistribute ospf 1 match [internal | external | nssa external] 将BGP重分发进IGP默认只重分发eBGP，可使用以下命令充分发iBGP 12router bgp 64512 bgp redistribute-internal BGP注入默认路由的3种方法123ip route 0.0.0.0 0.0.0.0 null0router bgp 64512 network 0.0.0.0 1234ip route 0.0.0.0 0.0.0.0 null 0 router bgp 64512 redistribute static default-information originate 12345router bgp 64512 neighbor x.x.x.x default-originate router bgp 64512 neighbor x.x.x.x default-originate route-map xx BGP路由聚合network方式汇总先配置一条指向null0的汇总静态路由，然后在bgp宣告此静态路由 123ip route 192.168.0.0 255.255.252.0 Null0router bgp 64512 network 192.168.0.0 mask 255.255.252.0 Aggregate聚合先使用network宣告明细路由，然后使用aggregate进行聚合 1234router bgp 123 network 192.168.0.0 mask 255.255.255.128 network 192.168.0.128 mask 255.255.255.128 aggregate-address 192.168.0.0 255.255.255.0 summary-only Aggregate聚合常见参数 参数 作用 advertise-map 只对该map匹配的路由进行聚合 as-set 让聚合路由继承明细路由属性 attribute-map 清除&#x2F;添加需要的属性 summary-only 抑制明细路由，只发布聚合路由 suppress-map 抑制该map匹配的路由 BGP路由属性BGP路由属性分类 公认强制的–所有的BGP的updata消息都要包含该属性 公认自由决定的–该属性是可选可不选的，但是所有的BGP进程都能识别 可选传递的–即使BGP进程不能识别该属性，也会继续传递下去 可选非传递的–如果BGP进程不能识别该属性，可以忽略这条updata,并且不传递下去 1、公认强制属性 –AS路径(AS-path) –下一跳（next-hop） –源头(origin) 2、公认自由决定的 –本地优先级（local preferent） 3、可选传递的 –团体属性（community） 4、可选非传递属性 –MED BGP路由常见属性weight-路由权重只能入向做,cisco私有，本地产生路由weight 32768，越大越优 local preference-本地优先级LP属性在同一AS内有效，发送给AS内其它路由器，告知离开AS的最佳路由。 EBGP邻居传路由，不携带LP，默认100 IBGP邻居传递路由，携带LP 修改LP的操作可以在IBGP邻居的入向或出向，或者EBGP邻居之间的入向执行 bgp default local-preference 101 针对自己始发的路由和EBGP传给我的路由有效 AS-PATH-AS路径AS-PATH表示一条路由经过的AS。 AS-PATH的优先级按个数算，经过越少的AS越优。 其中， 联邦内as不计入总数，路由聚合后的as-set算一个AS； 在使用route-map添加AS时，添加后的AS在出向策略靠右显示，在入向策略靠左显示 可以增加多个自己的as号来加长as-path属性 bgp best-path ignore 可忽略这条选路原则 origin-起源类型起源类型三种igp，egp，未知（?） 其中优先级如下 igp&gt;egp&gt;imcomplete（i&gt;e&gt;?） MED-多出口鉴别MED用于发送给其它AS，告知进入本AS的最佳路径。 在两个AS之间存在多条路径时使用 用来影响ebgp邻居，告诉自己的ebgp邻居如何选最优路由 MED默认值0，越小越优 MED传递特殊规则 metric传递不能传出AS。例：始发路由器可以将metric传给任何邻居，可以是IBGP&#x2F;EBGP，但邻居收到后，不能传出邻居所在的AS。 默认相同AS传来的MED才会比较，如果比较不同AS传来的MED需要命令bgp always-compare-med 团体属性（标准）标准BGP团体属性作用于多条路由，让经过的路由器知道这些路由的传递范围。团体属性默认不被发送，可用以下命令向指定邻居发送团体属性 1neighbor 192.168.23.2 send-community [-/standard/both] 这里的团体属性是标准团体属性，而拓展团体属性本质是MPLS中的Route-Target（rt），这里暂不讨论 标准团体属性分公有团体属性和私有团体属性。公有团体属性是所有路由器都认识的属性，而私有团体属性需要预先在路由器上针对改属性做定义才可被路由器执行。 公有团体属性 公有团体属性的值表明了具有该属性的路由可被通告的范围 属性 路由传递范围 internet 收到后传递给任何peer no-advertise 收到后不传递给任何peer local-as 只在AS内传递，只在联邦iBGP之间传递 no-export 只在AS内传递，可在联邦iBGP和eBGP之间传递 私有团体属性 私有团体属性（32bits）有两种定义方式 十进制数，如123 XX:XX形式 路由器在收到私有团体属性后不做任何操作，除非有预先定义的策略。如，AWS DX-Gateway根据BGP私有团体属性（XX:XX形式）来进行云网络至IDC网络方向的选路，7224:7100，7224:7200，7224:7300分别表示携带该属性路由的优先级为低中高。 标准团体属性配置 12345router bgp 64512 neighbor 192.168.12.2 route-map community_std outroute-map community_std permit 10 set community local-AS #公有团体属性 set community 7224:7100 #私有团体属性 BGP选路原则以下情况忽略路由 不同步 下一跳不可达 ebgp学到路由AS包含自己 bgp enforce-first-as但收到不是第一个as receive only 11+2条选路原则，标准BGP选路11条，带*的两条是补充： 1、最高weight值优先（思科私有默认32768，本地有效） 2、最高LP优先 3、加入方式，local&gt;network&gt;REDISTRIBUTE&gt;aggreate；local 最优 4、最短AS 5、起源类型origin IGP&lt;EGP&lt;IMCOMPLETE 6、最小MED 7、 EBGP&gt;IBGP 8 、优选去往下一跳 IGP metric小的 *9、负载（满足前8条和以下条件则负载） 配置maximum-path 多条等价路由的下一跳要不同 EBGP如果穿越了不同AS，也不会负载！！ 如果穿越了联邦，穿越了不通联邦的两条路由不负载 除非在BGP中加一条bgp bestpath as-path multipath-relax 负载仅仅是路由表，BGP表会继续向下比较知道选出一条best路径 隐藏命令bgp bestpath as-path multipath-relax 10、如果都是ebgp，优先选择先学到的 11、rid 小的优先，有RR的话，用originater地址代替rid比较 *12、最小的RR中cluster长度 13、最小的建立邻居的neighbor地址 路由反射器RR路由反射器是一台BGP路由器，可以将它的iBGP邻居指定为自己的客户端。路由反射器是为了解决iBGP的水平分割问题。为了使得iBGP路由全通，如果采用full mesh的方法则需要建立非常多的邻居关系，而路由反射器打破iBGP水平分割的原则，解决iBGP的路由传递问题。 路由反射器和其客户的集合被称为集群（cluster）,每一个集群都有一个cluster-id，默认情况下路由反射器的router-id会被用做cluster-id，也可以手工指定。路由反射器所传递的每一条客户端路由都会带上这个cluster-id。 RR路由传递规则从RR的一个客户端传递过来的一条路由： RR会传递给我的另外一个反射族的客户端 RR会传递给我的另外一个非客户端 RR会传递给我的另一个EBGP邻居 从RR的一个非客户端传递过来的一条路由： RR会传递给我的另外一个反射族的客户端 RR不会传递给我的另外一个非客户端 RR会传递给我的另一个EBGP邻居 从RR的一个EBGP传递过来的一条路由： RR会传递给我的另外一个反射族的客户端 RR会传递给我的另外一个非客户端 RR会传递给我的另一个EBGP邻居 总结：非非不能传，其它都能传 RR防环R4上的路由经过 R3 路由反射后，路由中就会带有Originator，即为 AS234 中始发此路由的 router-id，Cluster list：3.3.3.3，表明此路由已经经过路由反射器R3，就将路由反射器的 router-id 存放在Cluster list里 面。此时路由再传递至 R2 或 R3 上的时候，包含自己的router-id，将拒绝接收这条路由，这样设计的目的在于防止路由反射器FULL-MESH 时产生的环路 RR配置定义本路由器为路由反射器，指定邻居1.1.1.1为客户端 12router bgp 64512 neighbor 1.1.1.1 route-reflector-client BGP联邦BGP联邦是指将一个大的AS分成若干个小AS，小AS之间是EBGP关系。联邦也是为了解决iBGP水平分割问题。 联邦的定义 联邦中的所有路由器需要使用子AS的AS号 联邦中所有路由器需要声明主AS的AS号 子AS边界路由器需要互指联邦peers 123456789101112131415161718R1router bgp 64512 bgp confederation identifier 100 neighbor 192.168.12.2 remote-as 64512 neighbor 192.168.12.2 next-hop-selfR2router bgp 64512 bgp confederation identifier 100 bgp confederation peers 64513 neighbor 192.168.12.1 remote-as 64512 neighbor 192.168.23.3 remote-as 64513R3router bgp 64513 bgp confederation identifier 100 bgp confederation peers 64512 neighbor 192.168.23.2 remote-as 64512 联邦的AS号 联邦外路由器和联邦的边界路由器建立邻居关系时，neighbor大AS号。 联邦中的小AS号（64512）不算作AS-Path属性比较，只算作一个 在BGP表中，小AS号会用括号括住，并且不算做一个进行路径比较的AS号 路由惩罚（Dampening）由于BGP是运行再AS间的路由协议，通常没有办法直接管理对方AS的设备，为了防止因设备或者专线故障引起的路由频繁抖动，BGP可采用Dampening添加条件抑制抖动，予以抖动的邻居惩罚（主动抑制）。 Dampening相关参数惩罚值penalty：路由每翻动一次，这个惩罚值就会增加。惩罚值1000，不可修改 半衰期half life：默认15min，一个半衰期惩罚值降为原来一半。路由的惩罚值每5秒钟减少一次。 惩罚状态damp state：路由出于惩罚状态时，改路由不会被在BGP表中被优化，也不会传播 抑制门限suppress limit：默认2000，若一条路由的惩罚值超过抑制门限，则状态由history改为damp 重用门限reuse limit：默认750，惩罚值降到重用门限后，该路由将不被抑制 最大抑制时间、最大抑制门限：默认值60min&#x2F;12000，如果路由在短时间内表现出极端的不稳定性，然后又稳定下来，那么累计的惩罚值可能会导致这条路由在过长的时间里一直处于惩罚状态。这就是设置最大抑制门限的基本目的。如果路由表现出连续的不稳定性，那么惩罚值就停留在它的上限上，使得路由保持在惩罚状态。最大抑制门限是用公式计算出来的。最大抑制时间为一条路由停留在惩罚状态的最长时间。默认为60分钟（半衰期的4倍）可以配置。 针对某条路由的Dampening配置 12345678ip prefix-list 1 permit 1.1.1.0/24route-map DAMP match ip address prefix-list 1 set dampening 15 750 2000 60router bgp 64512 bgp dampening route-map DAMP","categories":[{"name":"路由交换RS","slug":"路由交换RS","permalink":"https://arclogicr.github.io/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2RS/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"routing","slug":"routing","permalink":"https://arclogicr.github.io/tags/routing/"},{"name":"bgp","slug":"bgp","permalink":"https://arclogicr.github.io/tags/bgp/"}]},{"title":"OSPF经典问题汇总","slug":"OSPF-QA","date":"2022-03-28T08:13:52.000Z","updated":"2023-01-17T07:30:20.667Z","comments":true,"path":"2022/03/28/OSPF-QA/","link":"","permalink":"https://arclogicr.github.io/2022/03/28/OSPF-QA/","excerpt":"","text":"OSPF采用分区域设计有什么好处？ 可以在ABR做路由汇总，减少其它区域路由表条目，减轻路由器压力 减少1，2类LSA泛洪 减少路由收敛的范围，一个区域的问题不会影响其它区域 影响OSPF邻接的原因有哪些？1、ROUTER ID不能相同；2、HELLO时间必须一致；3、DEAD时间必须一致；4、区域ID必须相同；5、认证必须相同；6、STUB标志位必须相同（hello包中域外路由重分布能力位）；7、MTU不匹配无法形成邻接关系8、OSPF版本号不同（目前版本为2）；9、当OSPF网络类型是MA时，要求掩码一定一致（两个邻居）。因为会出现DR和LSA-2，无法描述网段 如果OSPF双方路由器MTU不一致，会发生什么情况无法建立邻接关系 假设R1 MTU &lt; R2 MTU 首先，双方都可以进入exstart状态。然后双方开始单播发送第一个DBD，此时若R2的RID&gt;R1的RID 对于R1：收到R2第一个DBD发现MTU比自己大，无法接受；所以维持发送第一个DBD的状态，即维持exstart状态 对于R2: 正常收到R1的第一个DBD然后可以计算出自己是master，然后等待对方发送LSA摘要；但是发现R1只会发第一个DBD不发LSA摘要，（猜测：可能以为通讯有问题），于是维持发送第一个DBD，即维持exstart状态 若R2的RID&lt;RI的RID 对于R1：收到R2第一个DBD发现MTU比自己大，无法接受；所以维持发送第一个DBD的状态，即维持exstart状态 对于R2: 正常收到R1的第一个DBD然后可以计算出对方是master而自己是slave，然后会发送LSA摘要，即进入exchange状态，但对方没有回复LSA摘要，所以会支持卡在exchange这个状态 总结：当双方mtu不一致时若DBD从的mtu小，则双方都卡在exstart若DBD从的mtu大，则mtu大的进入exchange，mtu小的维持exstart 总之，mtu小的一定卡在exstart，mtu大的有可能进入exchange（取决于是否是DBD从角色） OSPF何时用组播，何时用单播？ HELLO包，不手动指定邻居的话都是发送到组播224.0.0.5 DBD，只是两个路由器之间建邻居互传DB摘要，采用单播 LSR，请求LSA，直接向DR请求，单播 LSU 回复LSR时是单播 触发更新时是组播 DR-Other 采用组播224.0.0.6告知DR&#x2F;BDR，由DR发送224.0.0.5告知其它所有路由器 p2p类型网络都是发送到组播224.0.0.5 LSAck，组播224.0.05 OSPF邻居表发现2-way是否正常MA网络中正常在MA网络中，DR和BDR分别与DROther建立full邻接关系，DROther之间只是2-way关系 如何判断一条LSA的新旧当一台路由器收到相同的LSA的多个实例时，将通过以下算法决定将哪一条放入数据库： 1、比较LSA实例的序列号，大的优先2、序列号相同，再比校验和，大的优先3、校验和也相同，再比老化时间，如果有一条LSA拥有大小为最大生存时间（3600S）的老化时间，则最优4、如果LSA的老化时间之间的差别多于15分钟，则老化时间小的优先5、如果以上条件都比不出来，则认为这些LSA相同 如果不相邻的两台OSPF路由器RID相同会发生什么若这些路由器在同一区域R1-R2-R3连接，且都属于同一区域假设R2-R3先正常建立邻居后，R1配置R3的RID接入。此时R1与R2可以建立full邻接关系，R1会收到R2发来的较新的1类LSA，这里的1类LSA应该有两条第一条ADV Router是R3第二条ADV Router是R1 这里R1会接受R2独有的路由（即ADV Router为R2且R3 没通告的路由，如lo 0的路由），收到R3路由发现和自己RID一样，会报RID dup的错，同时也会发送自己的最新的LSA。R3同理。最后结果就是R1,R3可以学到R2的loopback 路由但R1,R3互相的路由不稳定会翻动 若这些路由器在不通区域R1-R2-R3连接，R1-R2属于区域1，R2-R3属于区域0假设R2-R3先正常建立邻居后，R1配置R3的RID接入。此时R1与R2可以建立full邻接关系。这里R2是ABR，R2会吧R3通告的1类LSA转为3类，在发给区域1的时候ADV Router字段会变为自己（即R2的RID），但不会重新处理5类LSA。所以对区域1的内部路由器R1来说，收到的R3路由会当做普通的三类LSA处理，并不知道这些OIA路由来自哪里；同理，R3也能学到R1的域内路由。最后结果就是R1,R3可以互相学到域内路由","categories":[{"name":"路由交换RS","slug":"路由交换RS","permalink":"https://arclogicr.github.io/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2RS/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"routing","slug":"routing","permalink":"https://arclogicr.github.io/tags/routing/"},{"name":"ospf","slug":"ospf","permalink":"https://arclogicr.github.io/tags/ospf/"}]},{"title":"OSPF学习笔记","slug":"ospf-notes","date":"2022-03-27T10:12:04.000Z","updated":"2023-01-17T07:29:36.648Z","comments":true,"path":"2022/03/27/ospf-notes/","link":"","permalink":"https://arclogicr.github.io/2022/03/27/ospf-notes/","excerpt":"","text":"概述OSPF全称开放最短路径优先（Open Shortest Path First）是一种链路状态路由协议。v2版本的OSPF基于IPv4，v3版本的OSPF基于IPv6。在IPv4网络中OSPF应该是被使用最广泛的IGP了。 基本特点 OSPF属于IGP，是链路状态协议，基于IP协议号89 采用分区域的设计，所有区域需要和骨干区域ar0相连 区域内采用SPF(Dijkstra算法)计算最佳路径 可以快速响应网络拓扑变化（触发更新） 支持等价路径负载 三张表OSPF的运行涉及三张表 邻居表用于记录与opsf邻居之间的状态、参数等； 拓扑表本质是LSDB,通过LSA来更新数据。用于记录接收的LSA信息，在区域内和ma网络中保持一致 路由表通过DJ算法将最佳路由提交到路由表 OSPF路由器类型 路由器类型 功能 内部路由器 在一个普通区域内部的路由器 骨干路由器 在区域0的内部路由器 ABR 区域边界路由器，连接两个不通区域的路由器 ASBR 自治系统边界路由器，连接OSPF到另一个自治系统的路由器 OSPF报文类型 类型 内容 HELLO hello包，用于建立&#x2F;维护邻居 DBD 数据库描述，用于同步自身LSDB摘要 LSR 链路状态请求，用于请求LSA LSU 链路状态更新，用于传播LSA详细，可单播可组播 LSAck 用于确认收到LSU OSPF邻居OSPF通过hello报文来建立和维护邻居 ospf邻居建立过程down：周期性发送hello包；收到不带自己RID的hello包时进入initinit：继续正常周期性发送hello包；收到带自己RID的hello包进入2way2way：通过hello包携带的DR&#x2F;BDR信息（如有）选举DR&#x2F;BDR;然后进入exstartexstart: 双法开始单播发送第一个DBD；根据对方的第一个DBD选取主从；然后进入exchangeexchange: 开始交换DBD，以master序列号为基准，slave先发DBD，通过序列号隐式确认；发送完毕后进入Loadingloading: 双方开始根据DBD的LSA摘要，单播发送LSR请求详细的LSU，同步完成后进入fullfull: 邻接完成 OSPF LSA内容一个LSA可由{Type,LS ID,ADV Router}唯一描述 Type，LSA类型，常见有1，2，3，4，5，7 LS ID，链路状态ID，可理解为一个LSA的名称，每类LSA的该字段有不通含义 ADV Router，通告路由器 Age，老化时间，一般为3600s，每1800s会无触发更新 Seq，序列号，0x80000001开始计数，越大表示LSA越新 Checksum，校验和 Do Not Age Flag，不老化标识，虚链路LSA该位为1 OSPF LSA类型 类型 传播范围 产生与功能 LS ID字段 ADV字段 1类Router 区域内 每台路由器都会产生，传输本地链路状态 Router ID Router ID 2类Network 区域内，广播域内 DR产生，标识本MA网络中掩码和路由器 DR接口IP DR RouterID 3类Router Summary 泛洪整个AS（除totally stub区域） 由ABR重新产生（根据1、2类或其它3类），用于传递区域间路由 域间路由（网络号） ABR的Router ID，经过一个ABR就会变为该ABR的RID 4类ASBR Summary 除ASBR外的非stub区域 由ASBR所在区域的ABR产生并发出，用于告知ASBR的位置 ASBR的Router ID ABR的Router ID，经过一个ABR就会变为该ABR的RID 5类AS-External 全域泛洪，stub区域除外 ASBR产生，保持ADV不变，传递域外路由 域外路由（网络号） ASBR的Router ID 7类NSSA-External 只存在于NSSA区域内,NSSA的ABR会做7转5 由NSSA区域内ASBR产生，传递域外路由 域外路由（网络号） ASBR的Router ID OSPF区域类型ospf采用层次设计，用区域分割路由器；区域中路由器保存该区域中所有链路和路由器详细信息，但只保存其它区域路由器和链路的摘要信息 骨干区域主要为高速快速传递数据，通常不接用户 常规区域主要连接用户。所有数据需经过骨干区域中转。 非骨干区域主要包含以下几种类型 区域 特点 普通区域 区域内泛洪1、2类LSA，也会传递3，4，5类LSA Stub 不能配置外部重分发，阻止4，5类路由，ABR自动下发OIA默认路由 Totally Stub 不能外部重分发，不会传3，4，5类LSA，会传递1，2类和3类默认LSA，ABR自动下发OIA默认 NSSA 可以重分发外部路由作为7类LSA在ABR转成5类。允许1，2，3，7类LSA，ABR不会自动下发OIA默认 Totally NSSA 阻止3，4，5类LSA，允许1，2，7和3类默认LSA，ABR自动下发OIA默认 OSPF路由类型OSPF的LSA类型较多，不同LSA传递的路由类型也不一样，共有一下几种类型 O路由区域内路由，由1类LSA和2类LSA通过DJ算法计算得出 O IA路由区域间路由，由3类LSA习得 O E1&#x2F;N1路由1类外部路由&#x2F;1类NSSA外部路由，由4&#x2F;5&#x2F;7类LSA习得； O E2&#x2F;N2路由2类外部路由&#x2F;1类NSSA外部路由，由4&#x2F;5&#x2F;7类LSA习得； OSPF选路度量OSPF路由管理距离（AD）默认是110 （CISCO）， 度量单位是cost cost&#x3D;reference&#x2F;interface bandwidth reference默认是100000000 （10^8），其中每台路由器可以配置不一样，但建议全局一致。另外cost是分方向的，因为ospf区域内收敛算法（dj）需要画有向权重图，cost即为单向权重。 外部路由度量 &#x2F;Forward AddressForward Address 字段用于优化外部MA网络路由下一跳的问题。在ASBR产生LSA5时填充FA，若该外部路由下一跳接口是MA、且是有效ospf接口则FA填充为改路由实际下一跳地址。 Forward Metric 是本地到Forward Address 的cost，当forwardaddress&#x3D;0.0.0.0时，forward metric是本路由器到ASBR的metric OSPF外部路由type2（默认），默认种子metric为20，且metric不变OSPF外部路由type1，metric是种子metric+forward metric 另外，在 NSSA 区域，协议规定不能发送为0的FA；当把直连重分布进来，Forward Address：1、加入 ospf 最新的回环口作为 Forward Address；2、如果没有回环口，那么加入 ospf 最新的激活的接口地址； 如果把外部路由重分布进来，Forward Address：1、外部接口没有运行 ospf，Forward Address 同上；2、外部接口运行了 ospf，Forward Address 是外部路由的下一跳地址。 O 路由选路 依次比较AD Metric 小的优先 当收到来自不同的AR的1 2类LSA，计算的O路由，AD与Metric，先到的优先，不会负载 当收到来自相同AR的LSA1 2类，计算的O路由，AD与Metric相同，负载 O IA 路由选路 O&gt;OIA，不考虑AD、Metric 当收到来自Area 0的3类LSA时，不考虑其它区域的3类LSA，优选Area 0的，不考虑AD、Metric。若均来自Area0，一次比较AD、Metric，若相同，则负载； 当收到来自非Area0的3类LSA时，依次比较AD、Metric，小的有限，若相同，则负载 O E 选路 OIA&gt;OE，不考虑AD、metric OE1&gt;OE2，不考虑AD、meitric OE1路由，比较AD与Metric，相同则负载 OSPF路由汇总3类LSA汇总1area 2 range 100.1.0.0 255.255.252.0 含义：把区域2的1,2类转为3类时做汇总，即area 后面跟的区域。不能把本来就是OIA的路由做汇总； 5类LSA汇总1Summary-address 100.1.0.0 255.255.252.0 含义：5类LSA的汇总，只能在ASBR上做，即对自己产生的5类路由汇总，对于别的路由器产生的5类路由，没有汇总能力 OSPF网络类型网络物理连接可分为三种 POINT_TO_POINT BROADCAST NBMA 根据物理网络连接类型，OSPF网络类型分为以下几种： 类型 二层 Hello&#x2F;Dead DR&#x2F;BDR 手动邻居 &#x2F;32路由 P2P HDLC\\PPP\\FRp2p 10&#x2F;40 NO NO NO BROADCAST Eth、令牌环、FDDI 10&#x2F;40 YES NO NO NBMA FR&#x2F;X.25&#x2F;ATM 30&#x2F;120 YES YES NO P2MP(Multi) HUB-SPOKE 30&#x2F;120 NO NO YES P2MP(NB) CISCO私有 30&#x2F;120 NO YES YES Loopback loopback 当作host处理 OSPF建立邻接关系与网络类型无关，与hello&#x2F;dead有关，但不同的网络类型建立邻居后有可能学不到路由。 如果参与建邻的路由器都需要选举或都不需要选举DR&#x2F;BDR，则可以学习到路由，否则学不到，具体关系如下： p2p broadcast NBMA p2mp p2mp NB p2p NO NO YES YES broadcast YES NO NO NBMA NO NO p2mp YES p2mp NB OSPF虚链路OSPF虚链路用于解决OSPF区域设计上的问题。 假设R0-R1-R2-R3互联，R0-R1之间，R1-R2之间，R2-R2之间区域分别为0，1，2。R3由于现实原因无法与R0互联，那么可以采用虚链路。在ABR R1和中转区域R2上配置虚链路，相当于R2与区域0相连。 虚链路在使用上有一些限制： 虚链路只在建立邻居的时候发送hello包，邻居建立后不再发送 虚链路的LSA只会触发更新，并且不会老化 虚拟链路cost继承物理链路 虚链路不能跨区域建立（只能在‘被分割的’中转区域建立） 不能建立再STUB区域 OSPF认证OSPF认证是指在发送hello包时添加认证字段达到认证邻居的效果，可以保护自己的路由传给通过认证的邻居。 OSPF认证分接口认证和区域认证，区域认证本质就是所有属于该区域的接口都参与认证。同时配置接口认证和区域认证，以接口认证配置优先。 接口认证接口明文认证123int s1/1ip ospf authenticationip ospf authentication-key cisco 接口md5认证123int s1/1ip ospf authentication message-digestip ospf message-digest-key **1** md5 **cisco** 其中1是key-id，cisco是md5原文 区域认证区域明文12router ospf 1ar 0 authentication 区域md512router ospf 1ar 0 authentication message-digest 多 key md5 认证规则：当配置了最新的 key，将最新 key 与旧 key 都发送到对端： 若最新的 key，到对端没有找到对应的 key-id，则两端采用旧 key 完成认证。 若最新的 key，到对端找到相同的key-id，比较密钥，密钥不一致，认证失败；密钥一致，则认证通","categories":[{"name":"路由交换RS","slug":"路由交换RS","permalink":"https://arclogicr.github.io/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2RS/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"routing","slug":"routing","permalink":"https://arclogicr.github.io/tags/routing/"},{"name":"ospf","slug":"ospf","permalink":"https://arclogicr.github.io/tags/ospf/"}]},{"title":"IPv4地址","slug":"ipv4","date":"2022-03-17T10:16:23.000Z","updated":"2022-10-28T09:47:39.067Z","comments":true,"path":"2022/03/17/ipv4/","link":"","permalink":"https://arclogicr.github.io/2022/03/17/ipv4/","excerpt":"","text":"概述IPv4，全称Internet Protocol version 4，网际互联协议第四版。“the Internet”专指的互联网，而这里感觉internet翻译成“网络之间”、“网际”比较好，而不是“互联网”。 IP地址IP地址是IP协议中重要的一个逻辑概念，它用来去定位、寻找网络的组成部分中的一个（单播）或一些（多播、组播） IP地址的组成一个IP地址由4组8位的二进制数组成，中间用“.”分隔，如： 111000000.10101000.00000001.00000010 二进制位数太多，为了记忆、表达方便，一般采用十进制方式表达，每一段取值区间为[0,255]，上述IP地址可表示为 1192.168.1.2 掩码（Mask）一个IP地址共有4×8&#x3D;32位组成，按照位来划分，可人为定义主机号和网络号，比如 1192.168.1.2 我们定义前24位是网络位，后面8位是主机位。如此一来，我们可以很方便地根据前24位IP来定位一个网络，后8位来定位一台主机。其中192.168.1.0表示一个网络号，192.168.1.2表示192.168.1.0这个网络中的一台主机，24是192.168.1.0这个网络的掩码长度。 很容易发现192.168.1.0这个网络可用前24位唯一标识，而后8位主机位不能影响我们识别一个网络。那么我们将192.168.1.2化为二进制11000000.10101000.00000001.00000010，将它和由24个1和8个0组成的“IP”地址11111111.11111111.11111111.00000000进行’与’操作，得到的恰好就是它的网络号11000000.10101000.00000001.00000000(192.168.1.0)。把这个特殊的“IP”化为二进制得到255.255.255.0，这就是子网掩码。 IP地址分类、私有地址有类划分早期IP地址有一套有类划分方式，即根据一定则将IP地址根据子网掩码&#x2F;8，&#x2F;16，&#x2F;24分为不同类。但是这种分类方案显然并不十分合理，浪费IP资源。比如一个固定20台终端的部门被分配了&#x2F;24掩码的网段，那么有230多个地址没有被使用。 无类划分后来有了VLSM（可变长子网掩码）的概念，即可任意指定子网掩码。早期的路由协议如ripv1，igrp等都是只支持有类路由的；而CIDR(无类域间路由)，是基于VLSM的。 私有IP地址IP地址是一个逻辑概念，用于定位互联的网络中一台终端。理论上一个网络中所有IP地址不能有重复，但是由于IPv4地址耗尽，必须复用一些IP地址。一些不接入互联网的组织、单位、机构等，只需内部网络IP地址保持唯一即可。私有IP就是为这种场景设计的，在IP地址的有类划分中，每一类都有一个私有地址段。当然这种场景下，如果有访问互联网的需求，在公网地址有限的情况下，可以通过NAT技术实现私有网络与互联网互通。 IPv4地址有类划分A类地址IP地址第一段首位固定为0，即 10xxxxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx 由于第一位固定是0，第一段取值范围为0-127 A类私有地址为10.0.0.0&#x2F;8A类地址占总地址1&#x2F;2 B类地址首位固定10， 110xxxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx 第一段取值范围是128-191 私有地址172.16.16.0&#x2F;12 (16-31) 16个B C类地址首位固定110 1110xxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx 第一段取值范围192-223 私有地址192.168.0.0&#x2F;16 256个C C类地址占总地址1&#x2F;8 D类地址（组播，没有网络号和主机号）首位固定1110 11110xxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx 首段取值224-239 私有地址239.0.0.0&#x2F;8 D类地址占总地址1&#x2F;16 E类地址为实验地址，为除ABCD类之外的地址","categories":[{"name":"网络基础","slug":"网络基础","permalink":"https://arclogicr.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"tcp/ip","slug":"tcp-ip","permalink":"https://arclogicr.github.io/tags/tcp-ip/"}]}],"categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://arclogicr.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"},{"name":"文档翻译","slug":"文档翻译","permalink":"https://arclogicr.github.io/categories/%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"},{"name":"网络基础","slug":"网络基础","permalink":"https://arclogicr.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"},{"name":"路由交换RS","slug":"路由交换RS","permalink":"https://arclogicr.github.io/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2RS/"}],"tags":[{"name":"network","slug":"network","permalink":"https://arclogicr.github.io/tags/network/"},{"name":"openwrt","slug":"openwrt","permalink":"https://arclogicr.github.io/tags/openwrt/"},{"name":"virtualbox","slug":"virtualbox","permalink":"https://arclogicr.github.io/tags/virtualbox/"},{"name":"firewall","slug":"firewall","permalink":"https://arclogicr.github.io/tags/firewall/"},{"name":"translation","slug":"translation","permalink":"https://arclogicr.github.io/tags/translation/"},{"name":"kvm","slug":"kvm","permalink":"https://arclogicr.github.io/tags/kvm/"},{"name":"tcp/ip","slug":"tcp-ip","permalink":"https://arclogicr.github.io/tags/tcp-ip/"},{"name":"routing","slug":"routing","permalink":"https://arclogicr.github.io/tags/routing/"},{"name":"bgp","slug":"bgp","permalink":"https://arclogicr.github.io/tags/bgp/"},{"name":"ospf","slug":"ospf","permalink":"https://arclogicr.github.io/tags/ospf/"}]}